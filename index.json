[{"content":"\n\n  对Docker的简介网上有很多，我也就不说了，如果你不了解Docker是什么，可以先去网上查一查，Docker有三个最核心的概念，仓库(Repository)、镜像(Images)、容器(Container)，仓库可以看做是IPhone手机上的AppStore或者是Android手机上的应用市场，镜像可以看做是上架到应用商店的应用，容器这个概念比较不一样，可以把容器看做是镜像之上的一个空白层，你对镜像所产生的删除和添加都会在容器的这个空白层上，不会影响原有镜像如果你想一直应用变更你可以`commit`在这基础之上再派生一个镜像，Docker倡导`Build once，Run anywhere`。\n  ![58c0c50208a74.png](https://ooo.0o0.ooo/2017/03/09/58c0c50208a74.png)\n  Docker很像Git的管理机制，你可以对当前的变更进行提交也可以丢弃，也可以push上去把你的变更分享给他人使用，最好的学习方法还是实践，因为我使用的是Mac所以这里只说Mac的安装方法(Windows类似)，以后可能会写一篇关于Mac、Windows、Linux的安装吧，读者可以自行百度如何安装，很简单。\n  Mac/Windows用户可以从https://www.docker.com/toolbox  这个地方去下载Toolbox进行安装\n\n---\n\u003e   Toolbox是一个安装器，目前支持Mac和Windows平台。使用它可以快速地在安装Docker工具集。本段翻译自Docker官方博客。Toolbox 可以安装你在开发中运行Docker时所需要的一切：Docker客户端、Compose（仅Mac需要）、Kitematic、Machine以及VirtualBox。Toolbox使用Machine和VirtualBox在虚拟机中创建了一个引擎来运行容器。在该虚拟机上，你可以使用Docker客户端、Compose以及Kitematic来运行容器。\n---\n  \n我使用的Docker版本是v17.03.0-ce，安装完以后是想使用`docker info`查看docker信息测试是否安装成功，但是并不如意`Error checking TLS connection: Host is not running`出现了这个错误，提示也很明显就是说Docker的服务端没有启动(Docker是C/S架构)，我是这样做的\n```\n//因为待会我需要修改仓库地址，所以我可以先把默认的删除掉\n\u003e docker-machine rm default\n//创建默认的并修改成阿里云的加速地址,加速地址可以自行去申请，如果你就像使用默认的地址可以把 --engine-registry-mirror 这个参数删掉\n\u003e docker-machine create --engine-registry-mirror=https://xxxxxx.aliyuncs.com -d virtualbox default\n\u003e docker-machine env default\n\u003e eval \"$(docker-machine env default)\"\n\u003e docker info\n```\n  建议将`eval \"$(docker-machine env default)\"`写入`.bash_profile`之类的环境文件中去，这样就不用每次新开命令行窗口都要执行一遍这个了，重启电脑后Docker是不会自动启动的，可以执行`docker-machine start default`，或配置成开机启动。\n  环境搭建好了后开始进行实践，按照上图首先我们需要一个系统镜像(这里我是使用Ubuntu)可以去docker hub上去找 ，由于我是使用的aliyun的镜像仓库( [开发者平台](https://dev.aliyun.com) )我便直接在aliyun的镜像仓库找了\n```\n//首先需要将仓库的镜像拉取至本地\n\u003e docker pull learn/tutorial \n//查看本地的镜像\n\u003e docker images\n//利用pull至本地的镜像run一个容器\n\u003e docker run learn/tutorial echo \"Hello World!\"\nHello World\n```\n  实际上你在执行run的时候，如果镜像不存在本地，它会自己去仓库搜索这个镜像pull下来.该镜像是用的默认源，这里可以参照 [Ubuntu镜像使用帮助](http://mirrors.163.com/.help/ubuntu.html)修改源，修改完后记得执行`sudo apt-get update`\n```\n//通过命令查看运行过的容器\n\u003e docker ps -a \n//安装ping \n\u003e docker run learn/tutorial  apt-get install -y ping\n//可以查看到刚刚执行的docker容器，复制它的container id\n\u003e docker ps -l\n//提交，在原有镜像的基础上增加了ping，生成新的镜像\n\u003e docker commimt 6a713461237b dlq/ping\n//查看镜像\n\u003e docker images\n//使用刚自行创建的镜像运行一个容器进行操作\n\u003e docker run dlq/ping ping www.dlq.wiki\n```\n![20170310148911733958456.png](http://blog-cdn.fingerskey.com/20170310148911733958456.png)\n  当然你可以使用`docker ps -a` 查看你所有运行过的容器，想删除的可以通过`docker rm 容器ID`如果想删除镜像可以通过`docker rmi 镜像名/ID`\n```\n\u003e docker run dlq/ping apt-get install -y wget\n\u003e docker ps -l\n\u003e docker commit 50f0371d625a dlq/ping-wget\n\u003e docker run dlq/ping-wget wget http://dlq.wiki/\n```\n```\n\u003e docker images\n\u003e docker run dlq/ping-wget apt-get  remove -y iputils-ping\n\u003e docker ps -l\n\u003e docker commit 22ce090470e9 dlq/wget\n```\n  ^ ^ 文章到此结束，你还可以使用`docker push`将你的镜像推送至仓库，具体操作可以参照Docker官网文档，以后可能还会在写一篇《Docker构建开发环境And线上》","cover":"http://blog-cdn.fingerskey.com/20170311148919925474359.jpg","link":"docker-base.html","preview":"","title":"Docker入门简明"},{"content":"\n\n简略说一下文章的大纲\n* 标签选择器\n* 类选择器\n* ID选择器\n* 后代选择器\n* 子元素选择器\n* 相邻元素选择器\n* 属性选择器\n* 选择器的覆盖\n\n## 标签选择器\n```\nh1{\n\tcolor: red;\n}\n```\n `\u003ch1\u003e我的文字将会变成红色\u003c/h1\u003e`\n标签选择器就是让样式按照指定的标签去匹配需要应用这个样式的元素\n\n## 类选择器\n```\n.error{\n\tcolor: red;\n\tpadding: 15px;\n  border: 1px #ccc red;\n}\n```\n`\u003cdiv class=“error”\u003e错误提示\u003c/div\u003e`\n类选择器就是让样式按照`class=\"样式\"`的方式去匹配需要应用这个样式的元素\n\n## ID选择器\n```\n#intro{\n\tline-height:1.5;\n}\n```\n`\u003cp id=\"intro\"\u003e简介... ba la ba ba la 如果你想看行高的效果的话，可以一直输入到换行，或者调整浏览器宽度至换行\u003c/p\u003e`\n同上，顾名思义让样式按照`id=“ID的方式”`去匹配\n\n## 后代选择器\n```\nnav li{\n  background: red;\n}\n```\n```\n\u003cul class=\"nav\"\u003e\n  \u003cli\u003eHome\u003c/li\u003e\n  \u003cli\u003eTags\u003c/li\u003e\n  \u003cli\u003eAbount\u003c/li\u003e\n  \u003cli\u003eUser\u003c/li\u003e\n  \u003cul\u003e\n   \u003cli\u003eSettings\u003c/li\u003e\n   \u003cli\u003eLogout\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/ul\u003e\u0003\n```\n通过以上示例可以看到`nav`下的子元素 `li`标签和其它子元素下的子元素`li`标签的背景色都被设置成了红色。\n\n## 子元素选择器\n```\nnav\u003eli{\n  background: red;\n}\n```\n```\n\u0003\u003cul class=\"nav\"\u003e\n  \u003cli\u003eHome\u003c/li\u003e\n  \u003cli\u003eTags\u003c/li\u003e\n  \u003cli\u003eAbount\u003c/li\u003e\n  \u003cli\u003eUser\u003c/li\u003e\n  \u003cul\u003e\n   \u003cli\u003eSettings\u003c/li\u003e\n   \u003cli\u003eLogout\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/ul\u003e\u0003\n\n```\n通过以上示例可以看到`nav`下的子元素 `li`标签的背景色应用了样式被设置成了红色，其它子元素下的`li`标签并没有应用样式。但是需要注意的是子元素选择器在IE7中有BUG，如果父元素和子元素之间有HTML注释的话，后面所有跟有注释的子选择器的选择器会被忽略，IE7的更高版本都是支持子元素选择器的，如果想在IE7或者IE8上使用类似于子选择器的效果可以参照以下示例\n```\n.nav li{\n  background: red;\n}\n\n.nav li *{\n  background: none;\n}\n```\n\n## 相邻元素选择器\n```\nh1 + p {\n  font-weight: bold;\n}\n```\n```\n\u003ch1\u003e文章标题\u003c/h1\u003e\n\u003cp\u003e提示\u003c/p\u003e\n\u003cp\u003e内容 ba la ba la\u003c/p\u003e\n```\n通过以上示例我们可以看到相邻元素选择器只会对根据元素顺序下的下一个元素起作用，但是要注意IE，相邻元素选择器只在IE7(S)、IE8(S)或更高版本使用。\n\n### 属性选择器\n```\ninput[type=\"text\"]{\n  border: 1px solid #ccc;\n}\n\na[data-href]{\n\tcolor: red;\n}\n```\n```\n\u003cinput type=\"text\" name=\"username\" \u003e\n\u003ca data-href=\"https://www.google.com.hk/\"\u003e跳转\u003c/a\u003e\n```\n通过示例可以看到属性选择器只会对HTML代码中满足属性选择器的表达式的元素才会起作用\n\n## 选择器的覆盖\n```\n.error{\n\tcolor: blue;\n}\n.error{\n\tcolor: red;\n}\n```\n前者会被后者替换掉，接下来说一下选择器的优先级\n`style=“”` \u003e `id` \u003e `class` \u003e`标签`  选择器是可以一起使用的，那浏览器是如何计算采用哪种样式的？\nstyle 1000分\nid      1个100分\nclass 1个10分\n标签  1个1分\n\n```\n#page{\n  color: #0ebeff;\n}\n.container{\n  color: #ccc;\n}\n```\n```\n\u003cdiv id=\"page\" class=\"container\"\u003e\n  我自年少,韶华倾覆。\n\u003c/div\u003e\n```\n结果显而易见`id` VS`class`  100 \u003e 1\n```\n\u0003#page h1{\n  color: #0ebeff;\n}\n#page .title{\n  color: red;\n}\n```\n```\n\u003cdiv id=\"page\" class=\"container\"\u003e\n  \u003ch1 class=\"title\"\u003e我自年少,韶华倾覆。\u003c/h1\u003e\n\u003c/div\u003e\n```\n想一想会使用哪个样式？ 第一个样式 id+标签得分 101 第二个 id+class得分110","cover":"http://blog-cdn.fingerskey.com/20170311148919991491772.jpg","link":"css-selector.html","preview":"","title":"CSS选择器简明"}]